name: Test and Publish

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core 2.1
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 2.1.x
    - name: Setup .NET Core 3.1
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.x
    - name: Setup .NET 5
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.100-rc.2.20479.15
    - uses: actions/cache@v2
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    - name: Install dependencies
      run: dotnet restore --locked-mode
    - name: Build
      run: dotnet build --configuration Release --no-restore
    - name: Test
      run: dotnet test --configuration Release --no-build

  push:
    name: NuGet Push
    runs-on: windows-latest
    needs: [build]
    if: github.event_name == 'push'
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core 2.1
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 2.1.x
    - name: Setup .NET Core 3.1
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.x
    - name: Setup .NET 5
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.100-rc.2.20479.15
    - uses: actions/cache@v2
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    - name: Install dependencies
      run: dotnet restore --locked-mode
    - name: Build
      run: dotnet build --configuration Release --no-restore
    - name: Generate NuGet packages
      run: dotnet pack --configuration Release --no-build -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg --output ./packages
    - name: Publish packages
      run: |
        Get-ChildItem -Path ./packages/ -Filter *.nupkg -File -Name | ForEach-Object {
          dotnet nuget push ./packages/$_ --source https://www.myget.org/F/ggg-killer/api/v3/index.json --api-key ${{ secrets.MYGET_API_KEY }} --skip-duplicate 
        }
      shell: pwsh
  train:
    name: Intellicode Train
    runs-on: windows-latest
    needs: [build]
    if: github.event_name == 'push'
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0 # We need to fetch the entire Git history in order to verify the authenticity.
    - name: Setup .NET Core 2.1
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 2.1.x
    - name: Setup .NET Core 3.1
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.x
    - name: Setup .NET 5
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.100-rc.2.20479.15
    - uses: actions/cache@v2
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    - name: Install dependencies
      run: dotnet restore --locked-mode
    - name: Build
      run: dotnet build --configuration Release --no-restore
    - name: Train Intellicode Model
      uses: microsoft/vs-intellicode@v1
