<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" encoding="utf-8" #>
<#
    // Arbitrary number
    const Int32 maxTypeParams = 16;

    IEnumerable<String> getseq ( Int32 count, String prefix = "a" )
    {
        var i = count;
        while ( i-- > 0 )
            yield return $"{prefix}{count  - i}";
    }

    IEnumerable<String> gettparams ( Int32 count ) => getseq ( count, "T" );
#>
/*
 * Copyright © 2019 GGG KILLER <gggkiller2@gmail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software
 * and associated documentation files (the “Software”), to deal in the Software without
 * restriction, including without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom
 * the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
using System;
using System.Reflection;
using System.Linq.Expressions;

namespace GUtils.Expressions
{
    /// <summary>
    ///	Static class full of utilities for creating expression trees
    /// </summary>
    public static partial class GExpression
    {
        #region MethodCall (Generated Code)

        /// <summary>
        /// Creates a method call expression
        /// </summary>
        /// <param name="inst"></param>
        /// <param name="name"></param>
        /// <typeparam name="Class"></typeparam>
        public static MethodCallExpression MethodCall<Class> ( Expression inst, String name )
        {
            return Expression.Call ( inst, typeof ( Class ).GetMethod ( name ) );
        }

        /// <summary>
        /// Creates a method call expression
        /// </summary>
        /// <param name="type"></param>
        /// <param name="inst"></param>
        /// <param name="name"></param>
        public static MethodCallExpression MethodCall ( Type type, Expression inst, String name )
        {
            return Expression.Call ( inst, type.GetMethod ( name ) );
        }

<#
for ( var i = 1; i < maxTypeParams + 1; i++ )
{
    var tparams = gettparams ( i );
#>
        /// <summary>
        /// Creates a method call expression
        /// </summary>
        /// <param name="type"></param>
        /// <param name="inst"></param>
        /// <param name="name"></param>
        /// <param name="args"></param>
<#foreach ( var tparam in tparams ) {#>
        /// <typeparam name="<#=tparam#>"></typeparam>
<#}#>
        public static MethodCallExpression MethodCall<<#=String.Join ( ", ", tparams )#>> ( Type type, Expression inst, String name, params Expression[] args )
        {
            MethodInfo method = type.GetMethod ( name, new[] {
<#foreach ( var tparam in tparams ) {#>
                typeof ( <#=tparam#> ),
<#}#>
            } );
            ParameterInfo[] @params = method.GetParameters ( );

            return Expression.Call ( inst, method,
<#for ( var ii = 0; ii < i; ii++ ) {#>
                args.Length > <#=ii#> ? args[<#=ii#>] : ( @params[<#=ii#>].HasDefaultValue ? Expression.Constant ( @params[<#=ii#>].DefaultValue ) : throw new InvalidOperationException ( "Argument #<#=ii#> does not have a default value." ) )<#=(ii<i-1?",":"")#>
<#}#>
            );
        }

        /// <summary>
        /// Creates a method call expression
        /// </summary>
        /// <param name="inst"></param>
        /// <param name="name"></param>
        /// <param name="args"></param>
        /// <typeparam name="Class"></typeparam>
<#foreach ( var tparam in tparams ) {#>
        /// <typeparam name="<#=tparam#>"></typeparam>
<#}#>
        public static MethodCallExpression MethodCall<Class, <#=String.Join ( ", ", tparams )#>> ( Expression inst, String name, params Expression[] args )
        {
            MethodInfo method = typeof ( Class ).GetMethod ( name, new[] {
<#foreach ( var tparam in tparams ) {#>
                typeof ( <#=tparam#> ),
<#}#>
            } );
            ParameterInfo[] @params = method.GetParameters ( );

            return Expression.Call ( inst, method,
<#for ( var ii = 0; ii < i; ii++ ) {#>
                args.Length > <#=ii#> ? args[<#=ii#>] : ( @params[<#=ii#>].HasDefaultValue ? Expression.Constant ( @params[<#=ii#>].DefaultValue ) : throw new InvalidOperationException ( "Argument #<#=ii#> does not have a default value." ) )<#=(ii<i-1?",":"")#>
<#}#>
            );
        }

<#}#>
        #endregion MethodCall (Generated Code)
<#/*--------------------------------------------------------------------------------------------------------------*/#>

        #region New (Generated Code)

        /// <summary>
        /// Returns a <see cref="NewExpression" /> of <typeparamref name="Class" />
        /// </summary>
        /// <typeparam name="Class"></typeparam>
        public static NewExpression New<Class> ( )
        {
            return Expression.New ( typeof ( Class ) );
        }

<#
for ( var i = 1; i < maxTypeParams + 1; i++ )
{
    var tparams = gettparams ( i );
#>

        /// <summary>
        /// Returns a <see cref="NewExpression" /> of <typeparamref name="Class" />
        /// </summary>
        /// <param name="args"></param>
        /// <typeparam name="Class"></typeparam>
<#foreach ( var tparam in tparams ) {#>
        /// <typeparam name="<#=tparam#>"></typeparam>
<#}#>
        public static NewExpression New<Class, <#=String.Join ( ", ", tparams )#>> ( params Expression[] args )
        {
            ConstructorInfo constructor = typeof ( Class ).GetConstructor ( new[]
            {
<#foreach ( var tparam in tparams ) {#>
                typeof ( <#=tparam#> ),
<#}#>
            } );

            return Expression.New ( constructor, args );
        }
<#
}
#>

        #endregion New (Generated Code)
<#/*--------------------------------------------------------------------------------------------------------------*/#>

        #region Throw (Generated Code)

        /// <summary>
        /// Returns a throw expression of type <typeparamref name="Class" />
        /// </summary>
        /// <typeparam name="Class"></typeparam>
        public static UnaryExpression Throw<Class> ( ) where Class : Exception
        {
            return Expression.Throw ( New<Class> ( ), typeof ( Class ) );
        }

<#
for ( var i = 1; i < maxTypeParams + 1; i++ )
{
    var tparams = gettparams ( i );
#>

        /// <summary>
        /// Returns a throw expression of type <typeparamref name="Class" />
        /// </summary>
        /// <param name="args"></param>
        /// <typeparam name="Class"></typeparam>
<#foreach ( var tparam in tparams ) {#>
        /// <typeparam name="<#=tparam#>"></typeparam>
<#}#>
        public static UnaryExpression Throw<Class, <#=String.Join ( ", ", tparams )#>> ( params Expression[] args ) where Class : Exception
        {
            return Expression.Throw ( New<Class, <#=String.Join ( ", ", tparams )#>> ( args ), typeof ( Class ) );
        }
<#
}
#>

        #endregion Throw (Generated Code)
    }
}
